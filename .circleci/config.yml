version: 2
jobs:
  build:
    docker:
      - image: cimg/openjdk:13.0
    working_directory: ~/working
    steps:
      - checkout
      - attach_workspace:
          at: ~/working
      - run:
          name: Generate Cache Checksum
          command: find . -name 'pom.xml' | sort | xargs cat > /tmp/maven_cache_seed
      - restore_cache:
          keys:
          - maven-{{ checksum "/tmp/maven_cache_seed" }}
          # fallback to latest cache if no exact match found
          - maven-
      - run: mvn clean install --settings '.circleci/settings.xml'
      - save_cache:
          paths:
            - ~/.m2
          key: maven-{{ checksum "/tmp/maven_cache_seed" }}
      - store_test_results:
          path: target/surefire-reports
      - store_artifacts:
          path: target/site
      - persist_to_workspace:
          root: .
          paths:
            - .
  deploy:
    docker:
      - image: cimg/openjdk:13.0
    working_directory: ~/working
    steps:
      - attach_workspace:
          at: ~/working
      - run:
          name: Generate Cache Checksum
          command: find . -name 'pom.xml' | sort | xargs cat > /tmp/maven_cache_seed
      - restore_cache:
          keys:
          - maven-{{ checksum "/tmp/maven_cache_seed" }}
          # fallback to latest cache if no exact match found
          - maven-
      - run:
          name: Deploy to JFrog
          command: mvn deploy --settings '.circleci/settings.xml'
      - persist_to_workspace:
          root: .
          paths:
            - .
# Most of the release steps were obtained from https://di.nmfay.com/circle-maven-versions
  release:
    docker:
      - image: cimg/openjdk:13.0
    working_directory: ~/working
    steps:
      - checkout
      - attach_workspace:
          at: ~/working
      - run:
          name: Generate Cache Checksum
          command: find . -name 'pom.xml' | sort | xargs cat > /tmp/maven_cache_seed
      - restore_cache:
          keys:
          - maven-{{ checksum "/tmp/maven_cache_seed" }}
          # fallback to latest cache if no exact match found
          - maven-
      - add_ssh_keys:
          fingerprints:
            - "97:f7:15:54:32:85:df:a3:67:bb:0d:b6:85:d0:5e:88"
      - run:
          name: Cut release
          command:  |
            # assemble current and new version numbers
            OLD_VERSION=$(mvn -q -Dexec.executable="echo" -Dexec.args='${project.version}' \
              --non-recursive org.codehaus.mojo:exec-maven-plugin:exec \
              --settings '.circleci/settings.xml')
            NEW_VERSION="${OLD_VERSION/-SNAPSHOT/}"
            echo "Releasing $OLD_VERSION as $NEW_VERSION"
            
            # ensure dependencies use release versions
            mvn versions:use-releases --settings .circleci/settings.xml
            
            # write release version to POM
            mvn versions:set -DnewVersion="$NEW_VERSION" --settings '.circleci/settings.xml'
            
            # setup git
            git config user.name "Release Script"
            git config user.email "builds@robustwealth.com"
            
            # commit and tag
            git add pom.xml */pom.xml
            git commit -m "release: $NEW_VERSION"
            git tag "$NEW_VERSION"
            
            # merge to master and publish
            git checkout master
            git fetch origin
            git pull
            git merge --no-edit release
            git push origin master --tags
            
            # prepare next development version
            # increment minor version number and reset "fix" number
            MAJ_VERSION=$(echo "$NEW_VERSION" | cut -d '.' -f 1)
            MIN_VERSION=$(echo "$NEW_VERSION" | cut -d '.' -f 2)
            NEW_MINOR=$(($MIN_VERSION + 1))
            DEV_VERSION="$MAJ_VERSION.$NEW_MINOR.0-SNAPSHOT"
            
            # update development branch
            git checkout dev
            git merge --no-edit release
            mvn versions:set -DnewVersion="$DEV_VERSION" --settings '.circleci/settings.xml'
            git add pom.xml */pom.xml
            git commit -m "ready for development: $DEV_VERSION [skip ci]"
            git push origin dev
            
            # clean up release branch
            git push origin :release
            echo "Released $NEW_VERSION and prepared dev with $DEV_VERSION"
workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build:
          context:
            - microservicesBuildDev
      - deploy:
          requires:
            - build
          context:
            - microservicesBuildDev
          filters:
            branches:
              only: /^(master|dev)$/
      - release:
          requires:
            - build
          context:
            - microservicesBuildDev
          filters:
            branches:
              only: /^release$/

